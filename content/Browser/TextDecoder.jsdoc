TextDecoder : Object

Decodes sequences of bytes into %%/String|Strings%%.

Spec:
https://encoding.spec.whatwg.org/#interface-textdecoder

----
new TextDecoder() : TextDecoder

Constructs a new TextDecoder that decodes UTF-8 strings.

<example>
const decoder = new TextDecoder();
console.log(decoder.decode(new Uint8Array([240,159,152,128,240,159,144,177,226,154,189,239,184,143])));
</example>

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder

----
new TextDecoder(label : String, [options : { \
    fatal : Boolean, \
    ignoreBOM : Boolean \
  }]) : TextDecoder

Constructs a new TextDecoder. See %%https://encoding.spec.whatwg.org/#concept-encoding-get|https://encoding.spec.whatwg.org/#concept-encoding-get%%
for valid **label** values.

<example>
const decoder = new TextDecoder('utf-16');

console.log(decoder.decode(new Uint16Array([0xd83d, 0xde00, 0xd83d, 0xdc31, 0x26bd, 0xfe0f])));
</example>

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder

----
instance.encoding : String

Returns the effective encoding from the **label** specified during construction of **this**.
See %%https://encoding.spec.whatwg.org/#concept-encoding-get|https://encoding.spec.whatwg.org/#concept-encoding-get%%
for the mapping from **label** values to **encoding**s.

<example>
const decoder = new TextDecoder();
console.log(decoder.encoding);

const decoder16 = new TextDecoder('utf-16');
console.log(decoder16.encoding);
</example>

ReadOnly:
true

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder-encoding

----
instance.fatal : Boolean

<example>
const decoder = new TextDecoder();
console.log(decoder.fatal);

const fatalDecoder = new TextDecoder('utf-8', { fatal: true });
console.log(fatalDecoder.fatal);
</example>

ReadOnly:
true

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder-fatal

----
instance.ignoreBOM : Boolean

<example>
const decoder = new TextDecoder();
console.log(decoder.fatal);

const ignoreBOMDecoder = new TextDecoder('utf-8', { ignoreBOM: true });
console.log(ignoreBOMDecoder.ignoreBOM);
</example>

ReadOnly:
true

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder-ignorebom

----
prototype.decode(input : ArrayBufferView, [options : {\
    stream : Boolean \
  }]) : String

Decodes the bytes from **input** into a new String based on **this.encoding**. If
**options.stream** is **true**, **this** will remember any partially consumed
characters and apply them to the next **decode()** call.

<example>
const decoder = new TextDecoder();
const bytes = new Uint8Array([240,159,152,128,240,159,144,177,226,154,189,239,184,143]);
console.log(decoder.decode(bytes));

let i = 0;
const chunkSize = 3;
let res = '';
while (i < bytes.length) {
  res += decoder.decode(bytes.subarray(i, i + chunkSize), { stream: true });
  i += chunkSize;
}
res += decoder.decode(bytes.subarray(i));
console.log(res);
</example>

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder-decode

----
prototype.decode(input : ArrayBuffer, [options : {\
    stream : Boolean \
  }]) : String

Decodes the bytes from **input** into a new String based on **this.encoding**. If
**options.stream** is **true**, **this** will remember any partially consumed
characters and apply them to the next **decode()** call.

<example>
const decoder = new TextDecoder();
const bytes = new Uint8Array([240,159,152,128,240,159,144,177,226,154,189,239,184,143]);
console.log(decoder.decode(bytes.buffer));
</example>

Spec:
https://encoding.spec.whatwg.org/#dom-textdecoder-decode
