URL : Object

An object that represents a web address.

Also provides methods to generate a url for
a %%/Blob|**Blob**%% so locally generated 
content can be passed to APIs that accept urls.

Spec:
https://url.spec.whatwg.org/#url-class

----
new URL(url : String) : URL

Creates a new **URL** object for the provided **url**.

<example>
const url = new URL('http://user:pass@example.com:8080/resource/path?q=1#hash');

console.log('href:', url.href);
console.log('protocol:', url.protocol);
console.log('username:', url.username);
console.log('password:', url.password);
console.log('host:', url.host);
console.log('hostname:', url.hostname);
console.log('port:', url.port);
console.log('pathname:', url.pathname);
console.log('search:', url.search);
console.log('hash:', url.hash);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-url

----
new URL(relativeUrl : String, base : String) : URL

Creates a new **URL** for the **relativeUrl** using **base** as the base url.

<example>
const url = new URL('../other?q=2#hash2',
                    'http://user:pass@example.com:8080/res/path/file?q=1#hash');

console.log('href:', url.href);
console.log('protocol:', url.protocol);
console.log('username:', url.username);
console.log('password:', url.password);
console.log('host:', url.host);
console.log('hostname:', url.hostname);
console.log('port:', url.port);
console.log('pathname:', url.pathname);
console.log('search:', url.search);
console.log('hash:', url.hash);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-url

----
instance.hash : String

The hash portion of the URL.

<example>
const url = new URL('http://example.com/path#hash');
console.log(url.hash);

url.hash = 'newhash';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-hash

----
instance.host : String

The host portion of the URL.

<example>
const url = new URL('http://example.com:8080/path');
console.log(url.host);

url.host = 'javascripture.com';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-host

----
instance.hostname : String

The hostname portion of the URL.

<example>
const url = new URL('http://example.com:8080/path');
console.log(url.hostname);

url.hostname = 'javascripture.com';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-hostname

----
instance.href : String

The effective value of the URL. Set this to replace the entire value.

<example>
const url = new URL('http://user:pass@example.com:8080/resource/path?q=1#hash');
console.log(url.href);

url.href = 'http://www.javascripture.com/URL#href';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-href

----
instance.origin : String

The origin of the URL.

<example>
const url = new URL('http://user:pass@example.com:8080/resource/path?q=1#hash');
console.log(url.origin);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-origin

ReadOnly:
true

----
instance.password : String

The password portion of the URL.

<example>
const url = new URL('http://user:pass@example.com');
console.log(url.password);

url.password = 'foo';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-password

----
instance.pathname : String

The path portion of the URL.

<example>
const url = new URL('http://example.com/resource/path');
console.log(url.pathname);

url.pathname = 'foo';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-pathname

----
instance.port : String

The port portion of the URL.

<example>
const url = new URL('http://example.com:8080/path');
console.log(url.port);

url.port = 3000;
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-port

----
instance.protocol : String

The protocol portion of the URL.

<example>
const url = new URL('http://example.com/path');
console.log(url.protocol);

url.protocol = 'https';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-protocol

----
instance.search : String

The search query portion of the URL. See also %%#searchParams|**searchParams**%%.

<example>
const url = new URL('http://example.com/path?q=1');
console.log(url.search);

url.search = 'foo=bar';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-search

----
instance.searchParams : URLSearchParams

Helper object to manipulate the %%#search|**search**%% portion of the URL.

<example>
const url = new URL('http://example.com/path?a=1&b=2');

console.log(url.searchParams.get('a'));
console.log(url.searchParams.get('b'));

for (const [k, v] of url.searchParams) {
  console.log(k, v);
}
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-searchparams

----
instance.username : String

The username portion of the URL.

<example>
const url = new URL('http://user:pass@example.com');
console.log(url.username);

url.username = 'foo';
console.log(url);
</example>

Spec:
https://url.spec.whatwg.org/#dom-url-username

----
createObjectURL(blob : Blob) : String

Creates a url for the specified **blob** that can be passed to 
methods that expect a url. When done with the returned url, call
%%#revokeObjectURL|**revokeObjectURL()**%% to free the resources
associated with the created url.

<htmlexample>
<!-- Creates a Worker using a local script instead of a remote url -->
<script id='code' type='text/plain'>
  postMessage('foo');
</script>
<script>
  var code = document.getElementById('code').textContent;
  var blob = new Blob([code], { type: 'application/javascript' });
  var url = URL.createObjectURL(blob);
  var worker = new Worker(url);
  URL.revokeObjectURL(url);

  worker.onmessage = function(e) {
    console.log('worker returned: ', e.data);
  };
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/FileAPI/#dfn-createObjectURL


----
revokeObjectURL(url : String) : undefined

Frees the resources associated with the **url** created by
%%#createObjectURL|**createObjectURL()**%%.

<htmlexample>
<!-- Creates a Worker using a local script instead of a remote url -->
<script id='code' type='text/plain'>
  postMessage('foo');
</script>
<script>
  var code = document.getElementById('code').textContent;
  var blob = new Blob([code], { type: 'application/javascript' });
  var url = URL.createObjectURL(blob);
  var worker = new Worker(url);
  URL.revokeObjectURL(url);

  worker.onmessage = function(e) {
    console.log('worker returned: ', e.data);
  };
</script>
</htmlexample>

Spec:
http://www.w3.org/TR/FileAPI/#dfn-revokeObjectURL
