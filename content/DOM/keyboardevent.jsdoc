KeyboardEvent : UIEvent

Event containing information about key presses.
See %%https://w3c.github.io/uievents/tools/key-event-viewer.html|Keyboard Event Demo%%.

Spec:
https://w3c.github.io/uievents/#interface-keyboardevent

----
new KeyboardEvent( \
  type : String,  \
  [eventInit : { \
     key : String, \
     code : String, \
     location : Number, \
     repeat : Boolean, \
     isComposing : Boolean, \
     ctrlKey : Boolean, \
     shiftKey : Boolean, \
     altKey : Boolean, \
     metaKey : Boolean, \
     modifierAltGraph : Boolean, \
     modifierCapsLock : Boolean, \
     modifierFn : Boolean, \
     modifierFnLock : Boolean, \
     modifierHyper : Boolean, \
     modifierNumLock : Boolean, \
     modifierScrollLock : Boolean, \
     modifierSuper : Boolean, \
     modifierSymbol : Boolean, \
     modifierSymbolLock : Boolean, \
     view : Window, \
     detail : Number, \
     bubbles : Boolean, \
     cancelable: Boolean, \
     composed : Boolean, \
  }]) : MouseEvent

Creates a new KeyboardEvent of the specified **type** and initial properties.

Spec:
http://www.w3.org/TR/DOM-Level-3-Events/#idl-interface-MouseEvent-initializers


----
instance.altKey : Boolean

Returns **true** if the keyboard's alt (Option on Mac) key is pressed.
See also %%#getModifierState|**getModifierState()**%%.

<htmlexample>
<input id='input'>
<div>altKey: <span id='output'>false</span></div>
<script>
  var input = document.getElementById('input');
  var output = document.getElementById('output');

  input.onkeydown = input.onkeyup = function(event) {
    output.textContent = event.altKey;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.charCode : Number

The effective character.  Only valid for keypress events.  Use 
%%/String#fromCharCode|**String.fromCharCode()**%%
to get a string version of the pressed character.

<htmlexample>
<input id='input'>
<div>charCode: <span id='charCodeOutput'></span></div>
<div>string: <span id='stringOutput'></span></div>
<script>
  var input = document.getElementById('input');
  var charCodeOutput = document.getElementById('charCodeOutput');
  var stringOutput = document.getElementById('stringOutput');

  input.onkeypress = function(event) {
    charCodeOutput.textContent = event.charCode;
    stringOutput.textContent = "'" + String.fromCharCode(event.charCode) + "'";
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.ctrlKey : Boolean

Returns **true** if the keyboard's control key is pressed.
See also %%#getModifierState|**getModifierState()**%%.

<htmlexample>
<input id='input'>
<div>ctrlKey: <span id='output'>false</span></div>
<script>
  var input = document.getElementById('input');
  var output = document.getElementById('output');

  input.onkeydown = input.onkeyup = function(event) {
    output.textContent = event.ctrlKey;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.code : String

<htmlexample>
<input id='input'>
<div>key: <span id='keyOutput'></span></div>
<div>code: <span id='codeOutput'></span></div>
<script>
  var input = document.getElementById('input');
  var keyOutput = document.getElementById('keyOutput');
  var codeOutput = document.getElementById('codeOutput');

  input.onkeydown = function(event) {
    keyOutput.textContent = event.key;
    codeOutput.textContent = event.code;
    event.preventDefault();
  };
</script>
</htmlexample>

ReadOnly:
true

Spec:
https://w3c.github.io/uievents/#dom-keyboardevent-code

----
instance.key : String

<htmlexample>
<input id='input'>
<div>key: <span id='keyOutput'></span></div>
<div>code: <span id='codeOutput'></span></div>
<script>
  var input = document.getElementById('input');
  var keyOutput = document.getElementById('keyOutput');
  var codeOutput = document.getElementById('codeOutput');

  input.onkeydown = function(event) {
    keyOutput.textContent = event.key;
    codeOutput.textContent = event.code;
    event.preventDefault();
  };
</script>
</htmlexample>

ReadOnly:
true

Spec:
https://w3c.github.io/uievents/#dom-keyboardevent-key

----
instance.keyCode : Number

<htmlexample>
<input id='input'>
<div>keyCode: <span id='keyCodeOutput'></span></div>
<div>which: <span id='whichOutput'></span></div>
<script>
  var input = document.getElementById('input');
  var keyCodeOutput = document.getElementById('keyCodeOutput');
  var whichOutput = document.getElementById('whichOutput');

  input.onkeydown = function(event) {
    keyCodeOutput.textContent = event.keyCode;
    whichOutput.textContent = event.which;
    event.preventDefault();
  };
</script>
</htmlexample>

ReadOnly:
true


----
instance.location : Number

One of %%#DOM_KEY_LOCATION_STANDARD|**DOM_KEY_LOCATION_STANDARD**%%,
%%#DOM_KEY_LOCATION_LEFT|**DOM_KEY_LOCATION_LEFT**%%,
%%#DOM_KEY_LOCATION_RIGHT|**DOM_KEY_LOCATION_RIGHT**%%,
%%#DOM_KEY_LOCATION_NUMPAD|**DOM_KEY_LOCATION_NUMPAD**%%.

<htmlexample>
<input id='input'>
<div>location: <span id='output'></span></div>
<script>
  var input = document.getElementById('input');
  var output = document.getElementById('output');

  var locationNames = {};
  Object.keys(KeyboardEvent).filter(function(name) { 
    return name.indexOf('DOM_KEY_LOCATION_') === 0;
  }).forEach(function(name) {
    locationNames[KeyboardEvent[name]] = name;
  });

  input.onkeydown = input.onkeyup = function(event) {
    output.textContent = locationNames[event.location];
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.metaKey : Boolean

Returns **true** if the keyboard's meta (Command on Mac, the Windows logo key in
some PC browsers) key is pressed.
See also %%#getModifierState|**getModifierState()**%%.

<htmlexample>
<input id='input'>
<div>metaKey: <span id='output'>false</span></div>
<script>
  var input = document.getElementById('input');
  var output = document.getElementById('output');

  input.onkeydown = input.onkeyup = function(event) {
    output.textContent = event.metaKey;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.repeat : Boolean

Returns **true** if the key event was generate by the user holding the key down.

<htmlexample>
<input id='input'>
<div>repeat: <span id='output'>false</span></div>
<script>
  var input = document.getElementById('input');
  var output = document.getElementById('output');

  input.onkeydown = input.onkeyup = function(event) {
    output.textContent = event.repeat;
  };
</script>
</htmlexample>

ReadOnly:
true

----
instance.shiftKey : Boolean

Returns **true** if the keyboard's shift key is pressed.
See also %%#getModifierState|**getModifierState()**%%.

<htmlexample>
<input id='input'>
<div>shiftKey: <span id='output'>false</span></div>
<script>
  var input = document.getElementById('input');
  var output = document.getElementById('output');

  input.onkeydown = input.onkeyup = function(event) {
    output.textContent = event.shiftKey;
  };
</script>
</htmlexample>

ReadOnly:
true


----
instance.which : Number

<htmlexample>
<input id='input'>
<div>keyCode: <span id='keyCodeOutput'></span></div>
<div>which: <span id='whichOutput'></span></div>
<script>
  var input = document.getElementById('input');
  var keyCodeOutput = document.getElementById('keyCodeOutput');
  var whichOutput = document.getElementById('whichOutput');

  input.onkeydown = function(event) {
    keyCodeOutput.textContent = event.keyCode;
    whichOutput.textContent = event.which;
    event.preventDefault();
  };
</script>
</htmlexample>

ReadOnly:
true

----
prototype.getModifierState(modifierKey : String) : Boolean

Returns **true** if the the **modifierKey** is pressed or active.
**modifierKey** must be one of
**'Alt'**,
**'AltGraph'**,
**'CapsLock'**,
**'Control'**,
**'Fn'**,
**'Meta'**,
**'NumLock'**,
**'ScrollLock'**,
**'Shift'**,
or
**'SymbolLock'**.

Spec:
https://w3c.github.io/uievents/#dom-keyboardevent-getmodifierstate

----
DOM_KEY_LOCATION_STANDARD : Number

Value:
0

ReadOnly:
true

----
DOM_KEY_LOCATION_LEFT : Number

Value:
1

ReadOnly:
true

----
DOM_KEY_LOCATION_RIGHT : Number

Value:
2

ReadOnly:
true

----
DOM_KEY_LOCATION_NUMPAD : Number

Value:
3

ReadOnly:
true

