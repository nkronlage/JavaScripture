JSON : Object

Contains methods for encoding and decoding JSON strings.

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12

----
parse(str : String) : Object

Parses the specified string of JSON and converts it to an **Object**.

<example>
var x = JSON.parse('{"foo": 1, "bar": 2}');
console.log(x.foo);
console.log(x.bar);
console.log();

// Consider using String.raw when embedding JSON directly in
// Javascript to handle escaped characters (such as \n).
var person = JSON.parse(String.raw`{
  "name": "John Doe",
  "address": "1234 Maple St\nChicago, IL"
}`);
console.log(person.address);
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.2

----
parse(str : String, reviver(key : String, value : String) : Object) : Object

Parses the specified string of JSON and converts it to an **Object**. 
**reviver** will be called for each parsed key/value pair
and the function's return value is used in place of the value.

<example>
var reviver = function(key, value) {
  console.log('reviver called with key="' + key + '", value=' + value);
  if (key === 'foo') {
    return value * 10;
  }
  return value;
};
var x = JSON.parse('{"foo": 1, "bar": 2}', reviver);
console.log(x.foo);
console.log(x.bar);
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.2

----
stringify(value : Object) : String

Converts **value** to a JSON string. If **value** has a **toJSON()** method
on it, the return value of that method will be used.

<example>
var x = { foo: 1, bar: 2 };
console.log(JSON.stringify(x));

x.toJSON = function() {
  return { baz: 3 };
};
console.log(JSON.stringify(x));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3

----
stringify(value : Object, replacer(key : String, value : Object) : String, [indent : String]) : String

Converts **value** to a JSON string. The **replacer** function is called
for each key/value pair and the return value is used as the value in
the final string.  If **indent** is specified, each key/value pair will
be on a new line with the **indent** string before the key. 

<example>
var x = { foo: 1, bar: 2 };

var replacer = function(key, value) {
  console.log('replacer called with key="' + key + '", value=' + value, ', this=' + this);
  if (key === 'foo') return value * 10;
  return value;
}
console.log(JSON.stringify(x, replacer, ' '));

// If the object has a toJSON method, that will be called
// before calling the replacer. The original object is
// available as 'this[key]' inside replacer.
// Note, the replacer must be a 'function() {}' instead of
// '=>' function to get the correct 'this'.
x = { foo: 1, bar: 2, toJSON() { return 'my toJSON'; } };

replacer = function(key, value) {
  console.log('replacer called with key="' + key + '", value=' + value, ', (this[key]===x)=' + (this[key]=== x));
  return value;
}
console.log(JSON.stringify(x, replacer, ' '));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3

----
stringify(value : Object, keyNames : Array<String>, [indent : String]) : String

Converts **value** to a JSON string. If **keyNames** is not **null**, only key/value pairs where the key is in **keyNames**
will be in the JSON string.  If **indent** is specified, each key/value pair will
be on a new line with the **indent** string before the key. 

<example>
var x = { foo: 1, bar: 2 };
console.log(JSON.stringify(x, ['foo']));

console.log(JSON.stringify(x, null, '  '));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3

