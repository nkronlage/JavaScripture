Promise : Object

A Promise is an object that represents an asynchronous operation that
will eventually produce a value.
Use the %%#then|**then()**%% method to hook up a callback that will
be called when the result of the asynchronous operation is ready.
ECMAScript 2017 introduced **async function()**s which
return Promises and the **await** keyword which can simplify
Promise based code.

Version:
ECMAScript 2015

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects

----
new Promise(executor(resolve(value : Object) : undefined, reject(error : Error) : undefined) : undefined) : Promise

Creates a new Promise. The Promise constructor calls **executer** 
immediately with the two functions **resolve** and **reject**.
**executor** should begin the asynchronous operation.  
When the operation is complete, call the **resolve**
function with the result. If there is an error during the 
operation, call **reject** with the error information.

<example>
var promise = new Promise(function(resolve, reject) {
  console.log('in Promise constructor function');
  setTimeout(function() {
    console.log('in setTimeout callback');
    resolve('foo');
  }, 100);
});
console.log('created promise');

promise.then(function(result) {
  console.log('promise returned: ' + result);
});
console.log('hooked promise.then()');
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise-executor

----
prototype.catch(onReject(error : Error) : undefined) : Promise

Schedules **onReject** to be called if the promise had an error (ie, 
the %%#new_Promise_Function|**executer function**%% called **reject()**
or a method in the promise chain threw an error).
**error** is the value passed to **reject**.  This is a shorthand
for calling %%#then|**then(undefined, onReject)**%%.  See also the
%%/Window#unhandledrejection|window unhandledrejecton event%%.

<example>
var throwPromise = new Promise(function(resolve, reject) {
  throw 'value thrown';
});

throwPromise.catch(function(result) {
  console.log('caught: ' + result);
});

var rejectPromise = new Promise(function(resolve, reject) {
  setTimeout(function() {
    reject('value passed to reject()');
  }, 100);
});

rejectPromise.catch(function(result) {
  console.log('caught: ' + result);
});
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.catch

----
prototype.finally(onFinally() : undefined) : Promise

Also schedules **onFinally** to be called when the promise has been either resolved
or rejected.

<example>
var promise = new Promise((resolve, reject) => {
  let x = Math.random();
  if (x < 0.5) {
    resolve(x);
  }
  else {
    reject(x);
  }
}).then(x => {
  console.log('resolved:', x);
}).catch(e => {
  console.log('rejected:', e);
}).finally(() => {
  console.log('in finally');
});
</example>

Version:
ECMAScript 2018

Spec:
https://tc39.es/ecma262/#sec-promise.prototype.finally

----
prototype.then(onResolve(value : Object) : Object, [onReject(error : Error) : Object]) : Promise

<p>
Schedules **onResolve** (if provided) to be called when the promise has been resolved.
**value** is the object passed to the %%/#new_Promise|**resolve()**%% function.
</p>

<p>
Also schedules **onReject** (if provided) to be called when 
the promise has been rejected or an exception was thrown in the **executor** method.
**error** is the object passed to the %%/#new_Promise|**reject()**%% function.
</p>

<p>
The return value from **onResolve** (or **onReject**) can either
be a normal Object or a Promise.  If the return value from **onResolve** is 
a normal Object, 
the Promise returned by **then()** will be resolved with that Object.
If the return value from **onResolve** is a Promise, **then()** will wait 
for that Promise to be resolved. **then()** will resolve the Promise it 
returned with the same value.
</p>

<p>
See also %%#catch|**catch()**%%.
</p>


<example>
// This promise randomly passes or fails.
var promise = new Promise(function(resolve, reject) {
  var random = Math.random();
  if (random < 0.5) {
    resolve('resolving with ' + random);
  }
  else {
    reject('rejecting with ' + random);
  }
});

promise.then(function(result) {
  console.log('onResolve: ' + result);
},
function(error) {
  console.log('onReject: ' + error);
});


// The following shows a simple 'Promise-ified' version of XMLHttpRequest
var loadUrl = function(url) {
  return new Promise(function(resolve, reject) {
    var request = new XMLHttpRequest();
    request.open('GET', url);
    request.onload = function() {
      resolve(request.response);
    };
    request.send(); 
  });
};

// The following demonstrates chaining Promises and how you can return
// either a Promise or a normal object to the next part of the chain 
loadUrl('/JSON').then(
  function(promiseText) {
    // Find the first link in the page and return a Promise that will load
    // that page.  The next block will run when this Promise completes.
    var firstLink = promiseText.match(/href="(\/.*?)"/)[1];
    return loadUrl(firstLink);
  }
).then(
  function(firstLinkText) {
    // Return the beginning of the first page's text. Since this is 
    // not returning a Promise.  The next block will run immediately.
    return firstLinkText.substring(0, 50);
  }
).then(
  function(firstLinkBeginning) {
    console.log('firstLinkBeginning: ' + firstLinkBeginning);
});
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.then

----
all(promises : Iterable<Promise>) : Promise<Array>

Creates a new Promise that will be resolved when all of **promises**
are resolved. If any of the promises are rejected, the returned Promise
will be rejected immediately and will provide the value of the
Promise that was rejected. See also %%#allSettled|allSettled()%%.

<example>
var promises = [];

for (var i = 0; i < 10; i++) {
  promises.push(new Promise(function(resolve, reject) {
    var timeout = i * 10;
    setTimeout(function() {
      resolve('resolving after ' + timeout + ' milliseconds');
    }, timeout);
  }));
}

Promise.all(promises).then(function(results) {
  console.log('all results:');
  for (var result of results) {
    console.log('  ' + result);
  }
});
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise.all

----
allSettled(promises : Iterable<Promise>) : Promise<Array>

Creates a new Promise that will be resolved when all of **promises**
are resolved or rejected. The result of the promise is an Array
containing objects with a **status** property (containing either **'fulfilled'**
or **'rejected'**) and either a **value** property (for fulfilled promises) or
**reason** property (for rejected promises). See also %%#all|all()%%.

<example>
var promises = [];

for (let i = 0; i < 10; i++) {
  promises.push(new Promise(function(resolve, reject) {
    var timeout = i * 10;
    setTimeout(function() {
      if (i % 3 === 0) {
        reject('rejecting after ' + timeout + ' milliseconds');
      }
      else {
        resolve('resolving after ' + timeout + ' milliseconds');
      }
    }, timeout);
  }));
}

Promise.allSettled(promises).then(function(results) {
  console.log('all results:');
  for (var result of results) {
    console.dir(result);
  }
});
</example>

Spec:
https://tc39.es/ecma262/#sec-promise.allsettled

Version:
ECMAScript 2020

----
any(promises : Iterable<Promise>) : Promise

Creates a new Promise that will be resolved when the first Promise it **promises** 
resolves. If all of **promises** are rejected, the returned promise will 
be rejected with an %%/AggregateError|AggregateError%% containing all the 
rejected values. See also %%#race|**race()**%%.

<example>
const promises = [];

// Queue several promises that randomly resolve/reject
for (let i = 0; i < 3; i++) {
  promises.push(new Promise((resolve, reject) => {
    const random = Math.random() * 200;
    setTimeout(function() {
      if (Math.random() < 0.2) {
        resolve('resolving after ' + random + ' milliseconds');
      }
      else {
        reject('rejecting after ' + random + ' milliseconds');
      }
    }, random);
  }));
}

try {
  const firstResult = await Promise.any(promises);
  console.log('first result: ' + firstResult);
}
catch (e) {
  console.log('all rejected:');
  for (const error of e.errors) {
    console.log(`  ${error}`);
  }
}
</example>

Spec:
https://tc39.es/ecma262/#sec-promise.any

Version:
ECMAScript 2021

----
race(promises : Iterable<Promise>) : Promise

Creates a new Promise that will be resolved when the first of **promises**
is resolved. If a promise is rejected before any resolve, the returned
Promise will be rejected immediately and will provide the value of the
Promise that was rejected. See also %%#any|**any()**%%.

<example>
var promises = [];

for (var i = 0; i < 10; i++) {
  promises.push(new Promise(function(resolve, reject) {
    var random = Math.random() * 1000;
    setTimeout(function() {
      resolve('resolving after ' + random + ' milliseconds');
    }, random);
  }));
}

Promise.race(promises).then(function(result) {
  console.log('first result: ' + result);
});
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise.race

----
reject(error : Error) : Promise

Returns a new Promise that is in the rejected state with **error** as 
the rejected error. Useful for passing values to APIs that expect promises.

<example>
// The following are equivalent
var w = Promise.reject('foo');
var x = new Promise(function(resolve, reject) {
                      reject('foo');
                    });
var y = (async function() { throw 'foo' })();
var z = (async () => { throw 'foo' })();
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise.reject

----
resolve(value : Object) : Promise

Returns a new Promise that is in the resolved state with **value** as 
the resolved value. Useful for passing values to APIs that expect promises.

<example>
// The following are equivalent
var w = Promise.resolve('foo');
var x = new Promise(function(resolve) {
                      resolve('foo');
                    });
var y = (async function() { return 'foo' })();
var z = (async () => 'foo')();
</example>

Spec:
http://www.ecma-international.org/ecma-262/6.0/#sec-promise.resolve

