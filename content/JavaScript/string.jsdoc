String : Object

Strings contain text.  They are represented as a sequence of UTF-16 characters.
JavaScript strings are immutable.

Primitive:
true

Iterable:
true

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5

----
new String(value : String) : Object

Creates a box for a string value.

<example>
var literal = 'string literal';
var boxed = new String('boxed string');
literal.foo = 'bar';
boxed.foo = 'bar';
console.log(literal.foo);
console.log(boxed.foo);
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.2.1

----
String(value : Object) : String

Returns a string representation of **value** by calling **value.toString()**.

<example>
console.log(String(true));

var x = {
  foo: 'bar',
  toString: function() {
    return this.foo;
  }
};

console.log(String(x));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.1.1

----
instance.length : Number

The **length** property is the number of characters in the string.  It is 1 greater 
than the index of the last character.

<example>
console.log(''.length);
console.log('abc'.length);
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.5.1

ReadOnly:
true

----
prototype.charAt(pos : Number) : String

Returns a **String** of length **1** that contains the character at 
position **pos**.  Another way to retrieve a character in a string is **this[pos]**.

<example>
console.log('abc'.charAt(2));
console.log('abc'[2]);
</example>


Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.4

----
prototype.charCodeAt(pos : Number) : Number

Returns the unicode value of the character at position **pos**.  Use 
%%#fromCharCode|**String.fromCharCode()**%% to generate a string from character code values.

See also %%/TextEncoder|TextEncoder%%.

<example>
console.log('abc'.charCodeAt(2));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.5

----
prototype.codePointAt(pos : Number) : Number

Returns the UTF-32 code point of starting at **pos**. If the UTF-16 value at 
**pos** does not start a surrogate pair, the returned value will be the UTF-16
value at **pos**.
Use 
%%#fromCodePoint|**String.fromCodePoint()**%% to generate a string from 
code points.

See also %%/TextEncoder|TextEncoder%%.

<example>
console.log('abc'.codePointAt(2));
console.log('üòÄüê±‚öΩÔ∏è'.codePointAt(2).toString(16));
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.codepointat

----
prototype.concat(string0 : String, [string1 : String, [...]]) : String

Returns a new **String** formed by joining each of the string parameters.

<example>
var x = 'a';
console.log(x.concat('bc', 'd'));
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.6

----
prototype.endsWith(searchString : String, [endIndex : Number]) : Boolean

Returns **true** if **searchString** is at the end of **this**.

If **endIndex** is specified, the last character of **searchString** must 
be at **endIndex - 1** in **this**.

<example>
var a = 'abcxyz';
console.log(a.endsWith('xyz'));
console.log(a.endsWith('xy', 5));
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.endswith

----
prototype.includes(searchString : String, [startingIndex = 0 : Number]) : Boolean

Returns **true** if **searchString** is somewhere in **this** starting the search from
**startingIndex**. If **startingIndex** is negative, **this.length** is added to it before
starting the search.

<example>
var x = ['a', 'b', 'c', 'd'];
console.log(x.includes('b'));
console.log(x.includes('b', 2));
console.log(x.includes('a', -2));
console.log(x.includes('e'));
</example>

Version:
ECMAScript 2016

Spec:
http://www.ecma-international.org/ecma-262/7.0/#sec-array.prototype.includes

----
prototype.indexOf(searchString : String, [startingIndex = 0 : Number]) : Number

Returns the first location of **searchString** in **this** starting the 
search from **startingIndex**.  Returns **-1** if **searchString** is not found.

<example>
var a = 'abcdbca';
console.log(a.indexOf('b'));
console.log(a.indexOf('bc', 2));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.7

----
prototype.lastIndexOf(searchString : String, [startingIndex : Number]) : Number

Returns the location of **searchString** in **this** starting the search from
**startingIndex** by searching backwards through the string.  If **startingIndex** 
is not specified, the search starts from the end of the string.
Returns **-1** if **searchString** is not found.

<example>
var a = 'abcdbca';
console.log(a.lastIndexOf('b'));
console.log(a.lastIndexOf('b', 3));
console.log(a.lastIndexOf('ef', 2));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.8

----
prototype.localeCompare(that : String, [locales : Array<String>, [options : { \
  caseFirst : String /* Must be one of **'lower'**, **'upper'**, or **'false'**. */, \
  ignorePunctuation : Boolean /* */, \
  localeMatcher : String /* Must be one of **'best fit'** or **'lookup'**. */, \
  numeric : Boolean /* */, \
  sensitivity : String /* Must be one of **'accent'**, **'base'**, **'case'**, or **'variant'**. */, \
  usage : String /* Must be one of **'search'** or **'sort'**. */ \
}]]) : Number

Compares **this** to **that**.  Returns a negative number if **this** would sort 
before **that**, **0** if **this** and **that** are equal, and a positive number if 
**this** would sort after **that**.

<example>
console.log('hey'.localeCompare('hello'));
console.log('hey'.localeCompare('hey'));
console.log('hey'.localeCompare('hi'));

var x = ['foo', 'bar', 'baz'];
console.log(x.sort(function(a, b) {
  return a.localeCompare(b);
}));
</example>

Spec:
http://www.ecma-international.org/ecma-402/1.0/#sec-13.1.1

----
prototype.match(regexp : RegExp) : Array<String>

If **regexp** matches **this**, returns a new **Array** with item **0** equal to the
portion of **this** that matched the regular expression, item **1** equal to the first
capturing group in **regexp**, item **2** equal to the second capturing group in **regexp**,
and so on.  The returned **Array** will also have an **index** property set to the
starting index of the match and an **input** property set to **this**. 
If **regexp** doesn't match **this**, returns **null**. See also 
%%#matchAll|String.matchAll()%% and %%/RegExp#exec|RegExp.exec()%%.

<example>
var regexp = /(\d\d\d)-(\d\d\d\d)/;
var result = 'call me: 555-4385'.match(regexp);
if (result) {
  console.log(result[0]);
  console.log(result[1]);
  console.log(result[2]);

  console.log('index: ' + result.index);
  console.log('input: ' + result.input);
}
</example>
<p>
You can name capture groups by placing **?&lt;<em>name</em>&gt;** at the start of the group.
The captured values are available on a **groups** property on the returned array. Note,
this is new with ECMAScript 2018.
</p>
<example>
var regexp = /(?<areacode>\d\d\d)-(?<number>\d\d\d-\d\d\d\d)/;
var result = 'call me: 333-555-4385'.match(regexp);
if (result) {
  console.dir(result.groups.areacode);
  console.dir(result[1]);
  console.dir(result.groups.number);
  console.dir(result[2]);
}
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.10

----
prototype.matchAll(regexp : RegExp) : Iterator<Array<String>>

Returns an iterator of all places regexp matches **this**. **regexp** must be a 
%%/RegExp#global|global%% RegExp.


<example>
const string = 'a: 12, b: 5, d: 6';

// Find all numbers in the string
let regexp = /\d+/g;
for (const match of string.matchAll(regexp)) {
  console.log(match[0]);
}
console.log();

// Capture groups are available in the 1, 2, ... elements of the array
regexp = /(\w+): (\d+)/g;
for (const match of string.matchAll(regexp)) {
  console.log(match[1], match[2]);
}
console.log();

// Capture groups can also be named
regexp = /(?<key>\w+): (?<value>\d+)/g;
for (const match of string.matchAll(regexp)) {
  console.log(match.groups.key, match.groups.value);
}
</example>

Version:
ECMAScript 2020

----
prototype.normalize(form : String) : String

Returns a normalized form of **this** according to **form**. **form** must be one
of **'NFC'**, **'NFD'**, **'NFKC'**, or **'NFKD'**. See 
%%https://unicode.org/reports/tr15/|https://unicode.org/reports/tr15/%%.

<example>
// See Figure 3 in https://unicode.org/reports/tr15/
var a = String.fromCharCode(0x212B);

var printString = function(form, s) {
  var charCodes = [...s].map(c => `   ${c}  0x${c.charCodeAt(0).toString(16)}  `);
  console.log(form, ' ', s, ' ', s.length, charCodes.join(' '));
};

console.log();
console.log('         len  char/code0  char/code1');  
printString('   ', a);
printString('NFD', a.normalize('NFD'));
printString('NFC', a.normalize('NFC'));
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.normalize

----
prototype.padEnd(minLength : Number, [fill = ' ' : String]) : String

Returns a new string with **fill** added to the end of **this**
until %%#length|**length**%% is equal to **minLength**. If **length**
is already greater than or equal to **minLength**, returns **this**
unchanged.

<example>
console.log('x'.padEnd(6) + '.');
console.log('long'.padEnd(6) + '.');
console.log('really long'.padEnd(6) + '.');
console.log();

console.log('x'.padEnd(10, '.'));
console.log('y'.padEnd(10, '-_'));
console.log();

for (let i = -4; i <= 4; i++) {
  var cols = [i, i * i, i / 4];
  var colLengths = [5, 5, 7];
  var colStrings = cols.map(function(x, index) {
    return x.toString().padEnd(colLengths[index]);
  })
  console.log(colStrings.join(' | '));
}
</example>

Version:
ECMAScript 2017

Spec:
https://tc39.es/ecma262/#sec-string.prototype.padend

----
prototype.padStart(minLength : Number, [fill = ' ' : String]) : String

Returns a new string with **fill** added to the start of **this**
until %%#length|**length**%% is equal to **minLength**. If **length**
is already greater than or equal to **minLength**, returns **this**
unchanged.

<example>
console.log('x'.padStart(6));
console.log('long'.padStart(6));
console.log('really long'.padStart(6));
console.log();

console.log('x'.padStart(10, '.'));
console.log('y'.padStart(10, '-_'));
console.log();

for (let i = -4; i <= 4; i++) {
  var cols = [i, i * i, i / 4];
  var colLengths = [5, 5, 7];
  var colStrings = cols.map(function(x, index) {
    return x.toString().padStart(colLengths[index]);
  })
  console.log(colStrings.join(' | '));
}
</example>

Version:
ECMAScript 2017

Spec:
https://tc39.es/ecma262/#sec-string.prototype.padstart

----
prototype.repeat(count : Number) : String

Returns a new **String** formed by repeating **this** **count** times.

<example>
console.log('.'.repeat(5));
console.log('-_'.repeat(5));
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.repeat

----
prototype.replace(searchValue : String, replaceValue : String) : String

Returns a new **String** where the first occurrence of **searchValue** in **this** is 
replaced with **replaceValue**.

<example>
var x = 'abcba'
console.log(x.replace('b', 'Z'));
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.11


----
prototype.replace(searchValue : String, replaceFunction(match : String, offset : Number, string : String) : String) : String

<p>
Returns a new **String** where the first occurrence of **searchValue** in **this** is
replaced with the value returned from calling **replaceFunction**.
</p>

<p>
The **match** parameter to
**replaceFunction** is the same as **searchValue**, **offset** is the index in **this**
where **searchValue** was found, and **string** is **this**.
</p>

<example>
var x = 'abcba';
var replaced = 'abcba'.replace('b', function(match, offset, string) {
  console.log('found match of "' + match + '"');
  console.log('  at offset ' + offset);
  console.log('  of string "' + string + '"');

  return match.toUpperCase();
});

console.log('replaced=' + replaced);
console.log('x=' + x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.11

----
prototype.replace(searchValue : RegExp, replaceValue : String) : String

Returns a new **String** where **searchValue** is replaced with **replaceValue**.

If **searchValue** is a %%/RegExp#global|global **RegExp**%%,
each match in **this** will be replaced.  Otherwise, just the first match will
be replaced.

<example>
var x = 'abcba';
console.log(x.replace(/b/, 'Z'));
console.log(x.replace(/b/g, 'Z')); // global RegExp
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.11

----
prototype.replace(searchValue : RegExp, replaceFunction(match : String, capture1 : String, capture2 : String, ..., offset : Number, string : String) : String) : String

<p>
Returns a new **String** where **searchValue** matches in **this** is
replaced with the value returned from calling **replaceFunction**.  If
**searchValue** is a %%/RegExp#global|global **RegExp**%%,
each match in **this** will be replaced.  Otherwise, just the first match will
be replaced.
</p>

<p>
The **match** parameter to
**replaceFunction** is the same as **searchValue**,
the **capture** parameters are the values of the capture groups in **searchValue** (if any),
**offset** is the index in **this** where **searchValue** was found,
and **string** is **this**.
</p>

<example>
var x = 'abcba';
var replaced = 'abcba'.replace(/b/g, function(match, offset, string) {
  console.log('found match of "' + match + '"');
  console.log('  at offset ' + offset);
  console.log('  of string "' + string + '"');

  return match.toUpperCase();
});

console.log('replaced=' + replaced);
console.log('x=' + x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.11

----
prototype.replaceAll(searchValue : String, replaceValue : String) : String

Returns a new **String** where all occurrences of **searchValue** in **this** are
replaced with **replaceValue**.

<example>
var x = 'abcba'
console.log(x.replaceAll('b', 'Z'));
console.log(x); // x is unchanged
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.replaceall

Version:
ECMAScript 2021

----
prototype.replaceAll(searchValue : String, replaceFunction(match : String, offset : Number, string : String) : String) : String

<p>
Returns a new **String** where all occurrences of **searchValue** in **this** are
replaced with the value returned from calling **replaceFunction**.
</p>

<p>
The **match** parameter to
**replaceFunction** is the same as **searchValue**, **offset** is the index in **this**
where **searchValue** was found, and **string** is **this**.
</p>

<example>
var x = 'abcba';
var replaced = 'abcba'.replaceAll('b', function(match, offset, string) {
  console.log('found match of "' + match + '"');
  console.log('  at offset ' + offset);
  console.log('  of string "' + string + '"');

  return match.toUpperCase();
});

console.log('replaced=' + replaced);
console.log('x=' + x); // x is unchanged
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.replaceall

Version:
ECMAScript 2021

----
prototype.replaceAll(searchValue : RegExp, replaceValue : String) : String

Returns a new **String** where all matches of **searchValue** are replaced
with **replaceValue**.

**searchValue** must be a %%/RegExp#global|global **RegExp**%%.

<example>
var x = 'abcba';
console.log(x.replaceAll(/b/g, 'Z'));
console.log(x); // x is unchanged
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.replaceall

Version:
ECMAScript 2021

----
prototype.replaceAll(searchValue : RegExp, replaceFunction(match : String, capture1 : String, capture2 : String, ..., offset : Number, string : String) : String) : String

<p>
Returns a new **String** where all matches of **searchValue** in **this** are
replaced with the value returned from calling **replaceFunction**.
**searchValue** must be a %%/RegExp#global|global **RegExp**%%.
</p>

<p>
The **match** parameter to
**replaceFunction** is the same as **searchValue**, 
the **capture** parameters are the values of the capture groups in **searchValue** (if any), 
**offset** is the index in **this** where **searchValue** was found, 
and **string** is **this**.
</p>

<example>
var x = 'abcba';
var replaced = 'abcba'.replaceAll(/b/g, function(match, offset, string) {
  console.log('found match of "' + match + '"');
  console.log('  at offset ' + offset);
  console.log('  of string "' + string + '"');

  return match.toUpperCase();
});

console.log('replaced=' + replaced);
console.log('x=' + x); // x is unchanged
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.replaceall

Version:
ECMAScript 2021

----
prototype.search(regexp : RegExp) : Number

Executes **regexp** on **this** and returns the index of the first match. 
Returns **-1** if **regexp** does not match **this**.

<example>
console.log('abcba'.search(/b/));
console.log('abcba'.search(/e/));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.12

----
prototype.slice(startIndex : Number, [endIndex : Number]) : String

Returns a new string composed of the section of **this** between **start** and
**end-1**.
If **endIndex** is not specified, **this.length** is used instead. If
**startIndex** or **endIndex** is negative, **this.length** is added to it before
performing the substring. See also %%#substring|**substring()**%%.

<example>
var x = 'abcde';
console.log(x.slice(2));
console.log(x.slice(-2)); // start becomes 0
console.log(x.slice(2, 4));
console.log(x.slice(2, -1)); // end becomes 0, start/end swap
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.13

----
prototype.split(separator : String, [limit : Number]) : Array<String>

Splits **this** at **separator** into an **Array** of **String**s. If 
**limit** is specified, the returned array will contain no more than
**limit** items.

<example>
var x = 'abcba';
console.log(x.split('b'));
console.log(x.split('b', 2));
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.14

----
prototype.split(separator : RegExp, [limit : Number]) : Array<String>

Splits **this** into an **Array** of **String**s. If **limit**
is specified, the returned array will contain no more than 
**limit** items.

<example>
var x = 'abcba';
console.log(x.split(/b/));
console.log(x.split(/b/, 2));
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.14

----
prototype.startsWith(searchString : String, [startingIndex = 0: Number]) : Boolean

Returns **true** if **searchString** is at the beginning of **this**.

If **startingIndex** is specified, **searchString** must be at **startingIndex**
in **this**.

<example>
var a = 'abcxyz';
console.log(a.startsWith('abc'));
console.log(a.startsWith('bc', 1));
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.endswith

----
prototype.substring(start : Number, [end : Number]) : String

Returns a new string composed of the section of **this** between **start** and
**end-1**.
Before performing the operation, **substring** may modifiy the effective values
of **start** and **end** as follows.  If both **start** and **end** are 
specified, and **end** is less than **start**, the values are swapped.
If either **start** or **end** is less than **0**, it is replaced with **0**.
If **end** is not specified, **this.length** is used instead.  
See also %%#slice|**slice()**%%.

<example>
var x = 'abcde';
console.log(x.substring(2));
console.log(x.substring(-2));
console.log(x.substring(2, 4));
console.log(x.substring(4, 2));
console.log(x.substring(2, -1));
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.15

----
prototype.toLowerCase() : String

Returns a copy of **this** where each character is lower case.

<example>
var x = 'aBCdEf';
console.log(x.toLowerCase());
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.16

----
prototype.toLocaleLowerCase() : String

Returns a copy of **this** where each character is lower case.

<example>
var x = 'aBCdEf';
console.log(x.toLocaleLowerCase());
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.17

----
prototype.toUpperCase() : String

Returns a copy of **this** where each character is upper case.

<example>
var x = 'aBCdEf';
console.log(x.toUpperCase());
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.18

----
prototype.toLocaleUpperCase() : String

Returns a copy of **this** where each character is upper case.

<example>
var x = 'aBCdEf';
console.log(x.toLocaleUpperCase());
console.log(x); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.19

----
prototype.trim() : String

Returns a copy of **this** with leading and trailing whitespace removed.
See also %%#trimStart|**trimStart()**%% and %%#trimEnd|**trimEnd()**%%.

<example>
var x = ' \t ab c ';
console.log("'" + x.trim() + "'");
console.log("'" + x + "'"); // x is unchanged
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.20

----
prototype.trimEnd() : String

Returns a copy of **this** with trailing whitespace removed.
See also %%#trim|**trim()**%% and %%#trimStart|**trimStart()**%%.

<example>
var x = ' \t ab c ';
console.log("'" + x.trimEnd() + "'");
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.trimend

Version:
ECMAScript 2019

----
prototype.trimStart() : String

Returns a copy of **this** with leading whitespace removed.
See also %%#trim|**trim()**%% and %%#trimEnd|**trimEnd()**%%.

<example>
var x = ' \t ab c ';
console.log("'" + x.trimStart() + "'");
</example>

Spec:
https://tc39.es/ecma262/#sec-string.prototype.trimstart

Version:
ECMAScript 2019

----
fromCharCode(char0 : Number, [char1 : Number, [...]]) : String

Returns a new string composed of characters from the specified UTF-16 values.
Each code should be between 0 and 0xFFFF inclusive.
Use %%#charCodeAt|**charCodeAt()**%% to retrieve character codes from strings.

See also %%#fromCodePoint|**fromCodePoint()**%% and %%/TextDecoder|TextDecoder%%.

<example>
console.log(String.fromCharCode(97, 98, 99));
</example>

Spec:
http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.3.2


----
fromCodePoint(codePoint0 : Number, [codePoint1 : Number, [...]]) : String

Returns a new string composed of characters from the specified UTF-32 code points.
Each code point should be between 0 and 0x10FFFF inclusive.

Use %%#codePointAt|**codePointAt()**%% to retrievecodes from strings.

See also %%#fromCharCode|**fromCharCode()**%% and %%/TextDecoder|TextDecoder%%.

<example>
console.log(String.fromCharCode(0xD83D, 0xDE00));
console.log(String.fromCodePoint(0xD83D, 0xDE00));
console.log(String.fromCodePoint(0x1F600));
</example>

Spec:
https://tc39.es/ecma262/#sec-string.fromcodepoint

----
raw(template : StringTemplateArray, [sub1 : String, [sub2 : String, [...]]]) : String

**String.raw** is intended to be used as a tagged templated string. It returns the
string as typed in JavaScript, without applying character escaping. For example,
**raw`foo\nbar`** returns **foo\nbar**, with no new line in the string.

<example>
console.log('a\tb');
console.log(String.raw`a\tb`);
</example>

Spec:
https://tc39.es/ecma262/#sec-string.raw

Version:
ECMAScript 2015
