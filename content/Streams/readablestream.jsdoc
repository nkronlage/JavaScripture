ReadableStream : Object

Represents a readable stream of data. The stream can be read using the
%%#getReader|ReadableStreamReader%% or by %%#pipeTo|piping to%% a
%%/WritableStream|WritableStream%%.

Spec:
https://streams.spec.whatwg.org/#rs-class-definition

----
new ReadableStream(source : ReadableStreamSource, [strategy : QueuingStrategy]) : ReadableStream

Spec:
https://streams.spec.whatwg.org/#rs-constructor

----
instance.locked : Boolean

ReadOnly:
true

Spec:
https://streams.spec.whatwg.org/#rs-locked

----
prototype.cancel([reason : Object]) : Promise<undefined>

Spec:
https://streams.spec.whatwg.org/#rs-cancel

----
prototype.getReader([options : {\
    mode : String /* Either **undefined** or **'byob'** */ \
  }]) : ReadableStreamDefaultReader

<example>
const res = await fetch('/fireworks.ogv');
const reader = res.body.getReader();

let result;
while (!(result = await reader.read()).done) {
  console.log('chunk size:', result.value.byteLength);
}
</example>

Spec:
https://streams.spec.whatwg.org/#rs-get-reader

----
prototype.pipeThrough(transform : {\
    readable : ReadableStream, \
    writable : WritableStream, \
  }, \
  [options : { \
    signal : AbortSignal, \
    preventAbort : Boolean, \
    preventCancel : Boolean, \
    preventClose : Boolean, \
  }]) : ReadableStream

Allows transforming the stream of data. Each chunk is passed to **transform.writable**.
Returns **transform.readable**. See %%/TransformStream|TransformStream%% for a 
convienient way to make the **transform** parameter.

<example>
const reader = new ReadableStream({
  start(controller) {
    ['a', 'b', 'c'].forEach(s => controller.enqueue(s));
    controller.close();
  }
}).pipeThrough(new TransformStream({
  transform(chunk, controller) {
    controller.enqueue(chunk.toUpperCase());
  }
})).getReader();

let result;
while (!(result = await reader.read()).done) {
  console.log(result.value);
}
</example>

Spec:
https://streams.spec.whatwg.org/#rs-pipe-through

----
prototype.pipeTo(destination : WritableStream, [options : { \
    signal : AbortSignal, \
    preventAbort : Boolean, \
    preventCancel : Boolean, \
    preventClose : Boolean, \
  }]) : Promise<undefined>

Passes each chunk to the WritableStream.

<example>
const res = await fetch('/fireworks.ogv');
res.body.pipeTo(new WritableStream({
  write(chunk) {
    console.log('chunk size:', chunk.byteLength);
  }
}));
</example>

Spec:
https://streams.spec.whatwg.org/#rs-pipe-to

----
prototype.tee() : Array<ReadableStream>

Spec:
https://streams.spec.whatwg.org/#rs-tee


